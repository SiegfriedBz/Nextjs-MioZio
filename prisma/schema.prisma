// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  isAdmin       Boolean   @default(false)

  // 1 user has many orders
  orders Order[]
}

model Image {
  id           String   @id @default(cuid())
  page         String? // home, menu, about, contact
  kw           String? // keyword
  contentTitle String? // title of the content if any
  img          String
  alt          String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model MenuCategory {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String   @unique // Pizza, Pasta, BURGER
  description String
  img         String
  bgColor     String? // bg color for category
  textColor   String? // text color for category
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 1 menuCategory has many menuItems
  menuItems MenuItem[]
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Decimal
  img         String
  isFeatured  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 1 menuItem belongs to 1 menuCategory
  category     MenuCategory @relation(fields: [categorySlug], references: [slug])
  categorySlug String

  // array of Json objects
  options Json[]
}

model Order {
  id         String      @id @default(cuid())
  status     OrderStatus @default(PENDING)
  totalPrice Decimal
  intent_id  String?     @unique // stripe payment intent id

  // 1 order belongs to 1 user
  user      User   @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail String // unique

  // array of Json objects
  cartItems Json[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  ON_THE_WAY
  DELIVERED
  CANCELLED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
